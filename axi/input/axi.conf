# file used to generate the VIP skeleton,
# see: https://github.com/antoinemadec/uvm_code_gen

vip_name = axi

has_master_and_slave = 1

#--------------------------------------------------------------
# sequence item
#--------------------------------------------------------------
trans_var = rand bit                           rwb;
trans_var = rand bit [AXI_ID_WIDTH-1:0]        id;
trans_var = rand bit [AXI_ADDR_WIDTH-1:0]      addr;
trans_var = rand bit [AXI_DATA_WIDTH-1:0]      data[$];
trans_var = rand bit [(AXI_DATA_WIDTH>>3)-1:0] byte_en[$];
trans_var = rand bit [7:0]                     burst_len_m1;
trans_var = rand bit [2:0]                     burst_size_log2;
trans_var = rand bit [1:0]                     burst_type;
trans_var = rand bit [1:0]                     lock;        // AXI3: 2 bits; AXI4: 1 bit
trans_var = rand bit [3:0]                     cache;
trans_var = rand bit [2:0]                     prot;
trans_var = rand bit [3:0]                     qos;         // AXI4 only
trans_var = rand bit [3:0]                     region;      // AXI4 only
trans_var = rand bit [1:0]                     resp;

#--------------------------------------------------------------
# interface
#--------------------------------------------------------------
# global
if_clock = wire                     ACLK;
if_port  = wire                     ARESETn;
# write address
if_port = wire [AXI_ID_WIDTH-1:0]   AWID;
if_port = wire [AXI_ADDR_WIDTH-1:0] AWADDR;
if_port = wire [7:0]                AWLEN;    // AXI3: 4 bits; AXI4: 8 bits
if_port = wire [2:0]                AWSIZE;
if_port = wire [1:0]                AWBURST;
if_port = wire [1:0]                AWLOCK;   // AXI3: 2 bits; AXI4: 1 bit
if_port = wire [3:0]                AWCACHE;
if_port = wire [2:0]                AWPROT;
if_port = wire [3:0]                AWQOS;    // AXI4 only
if_port = wire [3:0]                AWREGION; // AXI4 only
if_port = wire                      AWVALID;
if_port = wire                      AWREADY;
# write data
if_port = wire [AXI_ID_WIDTH-1:0]   WID;      // AXI3 only
if_port = wire [AXI_DATA_WIDTH-1:0] WDATA;
if_port = wire                      WSTRB;
if_port = wire                      WLAST;
if_port = wire                      WVALID;
if_port = wire                      WREADY;
# write response
if_port = wire [AXI_ID_WIDTH-1:0]   BID;
if_port = wire [1:0]                BRESP;
if_port = wire                      BVALID;
if_port = wire                      BREADY;
# read address
if_port = wire [AXI_ID_WIDTH-1:0]   ARID;
if_port = wire [AXI_ADDR_WIDTH-1:0] ARADDR;
if_port = wire [7:0]                ARLEN;    // AXI3: 4 bits; AXI4: 8 bits
if_port = wire [2:0]                ARSIZE;
if_port = wire [1:0]                ARBURST;
if_port = wire [1:0]                ARLOCK;   // AXI3: 2 bits; AXI4: 1 bits
if_port = wire [3:0]                ARCACHE;
if_port = wire [2:0]                ARPROT;
if_port = wire [3:0]                ARQOS;    // AXI4 only
if_port = wire [3:0]                ARREGION; // AXI4 only
if_port = wire                      ARVALID;
if_port = wire                      ARREADY;
# read data
if_port = wire [AXI_ID_WIDTH-1:0]   RID;
if_port = wire [AXI_DATA_WIDTH-1:0] RDATA;
if_port = wire [1:0]                RRESP;
if_port = wire                      RLAST;
if_port = wire                      RVALID;
if_port = wire                      RREADY;
